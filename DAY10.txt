Day10: 

1.	Combination sum-1 
Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

SOLUTION:

 vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> result;
        
        if(candidates.size() == 0)
            return result;
        // sorting in ascending order
        sort(candidates.begin(),candidates.end());
        
        vector<int> combination;
        tofindcombination(result, combination, candidates, target, 0 );
        
        return result;
    }
    void tofindcombination( vector<vector<int>>& result,vector<int>& combination, vector<int>& candidates, int target, int start ){
        // base case when true
        if(target == 0){
            result.push_back(combination);
        }
        
        for(int i=start; i<candidates.size(); i++){
            if(candidates[i] > target){
                break;
            }
            
            combination.push_back({candidates[i]});
            tofindcombination(result,combination,candidates, target-candidates[i],i);
            // backtrack
            combination.pop_back();
        }
    }

2.	Combination sum-2 
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]

SOLUTION:
--- SIMILIAR TO THE PREVIOUS ONE ---- ONLY TWO CHANGES 

vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> result;
        
        if(candidates.size() == 0)
            return result;
        
        sort(candidates.begin(),candidates.end());
        
        vector<int> combination;
        tofindcombinations(result,combination,candidates,target,0);
        
        return result;
    }
    
    void tofindcombinations(vector<vector<int>>& result, vector<int>& combination, vector<int>& candidates, int target, int start){
        if(target == 0){
            result.push_back(combination);
        }
        
        for(int i=start; i<candidates.size(); i++){
            if(i!=start && candidates[i] == candidates[i-1]){ // FIRST CHANGE NOT INCLUDING THE DUPLICATES
                continue;
            }
            
            if(candidates[i] > target)
                break;
            
            // ADD IN THE COMBINATION VECTOR
            combination.push_back({candidates[i]});
            // RECURSION
            tofindcombinations(result,combination,candidates,target-candidates[i],i+1); // TAKING THE NEXT SUBARRAY ELEMENT
            
            //BACKTRACK
            combination.pop_back();
        }
    }

3.	Palindrome Partioning 
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example:

Input: "aab"
Output:
[
  ["aa","b"],
  ["a","a","b"]
]

SOLUTION:
---O(2^(N*N)), O(N)-TO-O(N*N) -----
class Solution {
public:
    vector<vector<string>> res;
    string S;
    
    bool check(string s){
        int start = 0;
        int end = s.size() - 1;
        while(start<end){
            if(s[start]!=s[end]){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
    
    void dfs(int index, vector<string> path){
        if(index == S.size()){
            res.push_back(path);
        }
        
        for(int i=index; i<S.size(); i++){
            string sub = S.substr(index,i-index+1);
            if(check(sub)){
                path.push_back(sub);
                dfs(i+1,path);
                //BACKTRACK
                path.pop_back();
            }
        }
    }
    
    vector<vector<string>> partition(string s) {
        S = s;
        vector<string> path;
        dfs(0,path);
        return res;
    }
};

4. SUBSET SUM - I [Partition Equal Subset Sum]
Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Note:

Each of the array element will not exceed 100.
The array size will not exceed 200.
 

Example 1:

Input: [1, 5, 11, 5]

Output: true

Explanation: The array can be partitioned as [1, 5, 5] and [11].
 

Example 2:

Input: [1, 2, 3, 5]

Output: false

Explanation: The array cannot be partitioned into equal sum subsets.

SOLUTION:
---- TLE ---- BUT EASY TO UNDERSTAND ---
bool canPartition(vector<int>& nums) {
        int sum = 0;
        for(int i:nums)
            sum+=i;
        vector<int> ans;
        if(sum&1 == 1)  // ODD SUM
            return false;
        bool isPossible = partition(nums,sum/2,0,ans);
        
        if(isPossible)
            return true;
        return false;
    }
    
    bool partition(vector<int>& nums, int sum, int i, vector<int>& ans){
        if(i>=nums.size() || sum<0)
            return false;
        if(sum == 0)
            return true;
        ans.push_back(nums[i]);
        bool left = partition(nums,sum-nums[i],i+1,ans);
        if(left)
            return true;
        //BACKTRACK
        ans.pop_back();
        return partition(nums,sum,i+1,ans);
    }

------OPTIMIZED SOLUTION ------

bool dfs(vector<int> &nums, int index, int sum) {
        if(index == nums.size()) return false;
        if(sum == nums[index]) return true;
        if(sum < nums[index]) return false;
	// do the one with choose first, otherwise will TLE
        return dfs(nums, index + 1, sum - nums[index]) || dfs(nums, index + 1, sum);
    }
    
    bool canPartition(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if (sum % 2) return false;
	// reverse sort for faster solution
        sort(nums.rbegin(), nums.rend());
        return dfs(nums, 0, sum / 2);
    }

5. SUBSET SUM - II [Partition to K Equal Sum Subsets]
Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into k non-empty subsets whose sums are all equal.

 

Example 1:

Input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4
Output: True
Explanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.
 

Note:

1 <= k <= len(nums) <= 16.
0 < nums[i] < 10000.

SOLUTION:
class Solution {
public:
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int total=0;
        for(auto& num:nums)
        {
            total+=num;
        }
        if(total%k>0) return false;
        
        sort(nums.rbegin(),nums.rend());
        
        vector<int> sums(k,0);
        return backtrack(sums,nums,total/k,0,nums.size(),k);
    }
    
    bool backtrack(vector<int>& sums, vector<int>& nums, int target, int cur, int n, int k)
    {
        if(cur==n)
        {
            for(auto& sum:sums)
            {
                if(sum!=target)
                    return false;
            }
            return true;
        }
        
        for(int i=0;i<k;i++)
        {
            if(sums[i]+nums[cur]>target)
                continue;
            
            sums[i]+=nums[cur];
            
            if(backtrack(sums,nums,target,cur+1,n,k))
                return true;
            
            sums[i]-=nums[cur];
            
            if(sums[i]==0)
                return false;
        }
        
        return false;
    }
};

6. KTH PERMUTATION SEQUENCE
The set [1,2,3,...,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Note:

Given n will be between 1 and 9 inclusive.
Given k will be between 1 and n! inclusive.
Example 1:

Input: n = 3, k = 3
Output: "213"
Example 2:

Input: n = 4, k = 9
Output: "2314"

SOLUTION: ----NOT CORRECT APPROACH -- IT IS STL APPROACH .
 --- O(N!), O(N) ---
class Solution {
public:
   string getPermutation(int n, int k) {
        string str = "";
        for(int i = 1;i<=n;i++)
            str+=to_string(i);
        int cnt =k-1;
        while(cnt--)
        {
            next_permutation(str.begin(),str.end());
        }
        return str;
    }
};

----- TWO SOLUTION -----
-----------O(N^2), O(N) -------------
/*class Solution {
public:
   string getPermutation(int n, int k) {
      vector<int> fact(n,1);
       vector<int> digits(n,1);
       for(int i=1;i<n;i++){
           fact[i] = fact[i-1] * (i+1);
           digits[i] = i+1;
       }
       string result ="";
       while(result.size() < n-1){
           int repeat = fact[fact.size() - 2];
           int next_digit = (k - 1)/repeat;
           result+=to_string(digits[next_digit]);
           digits.erase(digits.begin() + next_digit);
           fact.pop_back();
           k = k%repeat;
           if(k == 0){
               for(int i=digits.size()-1;i>=0;i--){
                   result+=to_string(digits[i]);
               }
           }
       }
       
       if(result.size() < n)
           result+=to_string(digits[0]);
       
       return result;
    }
};
*/
class Solution {
    vector<int> fact,digits;
    void solve(string& ans,int n,int k)
    {
        if(n==1){       //Insert whatever digit is left at the end
            ans+=to_string(digits.back());
            return;
        }
        //This runs if we have more than 1 digit in digits array
        int index = k/fact[n-1]; //Defines no of blocks to skip (each block of size fact[n-1])

        if(k%fact[n-1]==0)  //We need convert 1 based indexing to 0 based.So, decrese index by 1
            index-=1;
        
        ans+=to_string(digits[index]);  //Add new character
        digits.erase(digits.begin()+index);    //Erase digit after using
        
        k -= fact[n-1]*index;  //Decrease K value
        solve(ans,n-1,k);
    }
public:
    string getPermutation(int n, int k) {
        //Store all factorials from 0 to N
        fact.push_back(1);
        int f=1;
        for(int i=1;i<n;++i)
        {
            f*=i;
            fact.push_back(f);
        }
        //Push your digits in array
        for(int i=1;i<=n;++i)
            digits.push_back(i);
        
        string ans = "";
        solve(ans,n,k); 
        return ans;
    }
};