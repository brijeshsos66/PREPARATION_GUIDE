
1. Maximum Length of Repeated Subarray ( LONGEST COMMON SUBSTRING )
#
-----O(M*N), O(M*N)------------------------------
Given two integer arrays A and B, return the maximum length of an subarray that appears in both arrays.

Example 1:

Input:
A: [1,2,3,2,1]
B: [3,2,1,4,7]
Output: 3
Explanation: 
The repeated subarray with maximum length is [3, 2, 1].
 

Note:

1 <= len(A), len(B) <= 1000
0 <= A[i], B[i] < 100

-->

 int findLength(vector<int>& A, vector<int>& B) {
        int m = A.size();
        int n = B.size();
        if(m == 0 || n == 0)
            return 0;
        int max = 0;
        vector<vector<int>> dp(m+1,vector<int>(n+1,0));
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(A[i-1] == B[j-1]){
                    dp[i][j] = 1 + dp[i-1][j-1];
                    if(dp[i][j] > max)
                        max = dp[i][j];
            }
        }
        }
        return max; 
    }

2. LONGEST COMMON SUBSEQUENCE(LCS)
Given two strings text1 and text2, return the length of their longest common subsequence.

A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order 
of the remaining characters. (eg, "ace" is a subsequence of "abcde" while "aec" is not). A common subsequence of two strings is a subsequence that is common to both strings.
If there is no common subsequence, return 0.

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
 

Constraints:

1 <= text1.length <= 1000
1 <= text2.length <= 1000
The input strings consist of lowercase English characters only.

--------------------------------O(M*N), O(M*N) ---------------------------------------------
#
int longestCommonSubsequence(string text1, string text2) {
        int m = text1.length();
        int n = text2.length();
        if(m==0 || n==0)
            return 0;
        vector<vector<int>> dp(m+1,vector<int>(n+1));
        
        for(int i =0;i<=m;i++){
            for(int j=0;j<=n;j++){
                if(i==0 || j==0)
                    dp[i][j] = 0;
                else if(text1[i-1] == text2[j-1])
                    dp[i][j] = dp[i-1][j-1]+1;
                else
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[m][n];
    }

3. LONGEST PALINDROME IN A STRING (DP)
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: "cbbd"
Output: "bb"

SOLUTION:
--NAIVE APPROACH ---O(N^3), O(1) ----- MAKE ALL THE N^2 STRINGS AND CHECK FOR PALINDROME
--OPTIMIZED  ----O(N^2), O(N^2) ----- DP
(I) 
string longestPalindrome(string s) {
        int n = s.length();
        if(n < 2)
            return s;
        
        int left = 0, right = 0;
        vector<vector<bool>> table(n,vector<bool>(n,false));
        
        for(int j=1;j<n;j++){
            for(int i=0;i<j;i++){
                bool isp = table[i+1][j-1] || (j-i <= 2);
                
                if(s[i] == s[j] && isp){
                    table[i][j] = true;
                    
                    if(j - i > right - left){
                        left = i;
                        right = j;
                    }
                }
            }
        }
        return s.substr(left,right+1);
    }

(II) 
#include <bits/stdc++.h> 
using namespace std; 
  
// Function to print a substring 
// str[low..high] 
void printSubStr( 
    string str, int low, int high) 
{ 
    for (int i = low; i <= high; ++i) 
        cout << str[i]; 
} 
  
// This function prints the 
// longest palindrome substring 
// It also returns the length of 
// the longest palindrome 
int longestPalSubstr(string str) 
{ 
    // get length of input string 
    int n = str.size(); 
  
    // table[i][j] will be false if substring 
    // str[i..j] is not palindrome. 
    // Else table[i][j] will be true 
    bool table[n][n]; 
  
    memset(table, 0, sizeof(table)); 
  
    // All substrings of length 1 
    // are palindromes 
    int maxLength = 1; 
  
    for (int i = 0; i < n; ++i) 
        table[i][i] = true; 
  
    // check for sub-string of length 2. 
    int start = 0; 
    for (int i = 0; i < n - 1; ++i) { 
        if (str[i] == str[i + 1]) { 
            table[i][i + 1] = true; 
            start = i; 
            maxLength = 2; 
        } 
    } 
  
    // Check for lengths greater than 2. 
    // k is length of substring 
    for (int k = 3; k <= n; ++k) { 
        // Fix the starting index 
        for (int i = 0; i < n - k + 1; ++i) { 
            // Get the ending index of substring from 
            // starting index i and length k 
            int j = i + k - 1; 
  
            // checking for sub-string from ith index to 
            // jth index iff str[i+1] to str[j-1] is a 
            // palindrome 
            if (table[i + 1][j - 1] && str[i] == str[j]) { 
                table[i][j] = true; 
  
                if (k > maxLength) { 
                    start = i; 
                    maxLength = k; 
                } 
            } 
        } 
    } 
  
    cout << "Longest palindrome substring is: "; 
    printSubStr(str, start, start + maxLength - 1); 
  
    // return length of LPS 
    return maxLength; 
} 
  
// Driver Code 
int main() 
{ 
    string str = "forgeeksskeegfor"; 
    cout << "\nLength is: "
         << longestPalSubstr(str); 
    return 0; 
} 

4. Longest Consecutive Sequence
Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

Your algorithm should run in O(n) complexity.

Example:

Input: [100, 4, 200, 1, 3, 2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
#
SOLUTION:
----------BRUTE FORCE ---------O(N^3), O(1) -----------MAKING THE N^2 SUBSEQUENCES THEN CHECK------
------------------------O(NLOGN), O(1) --------------USING SORTING THEN CHECKING ----------------
int longestConsecutive(vector<int>& nums) {
        if(nums.size() == 0)
            return 0;
        sort(nums.begin(), nums.end());
        
        int cus = 1;
        int maxs = 1;
        
        for(int i=1;i<nums.size();i++){
            if(nums[i]!=nums[i-1]){
                if(nums[i] == nums[i-1]+1){
                    cus+=1;
            }
            else{
                maxs = max(maxs,cus);
                cus = 1;
            }
        }
       }
        return max(maxs,cus);
    }

-----------------------O(N), O(N) ----------------------OPTIMIZED USING THE HASH SET--------------

int longestConsecutive(vector<int>& nums) {
        if(nums.size() == 0)
            return 0;
        unordered_set<int> s;
        for(int i: nums)
            s.insert(i);
        int ans = 0;
        
        for(int i=0;i<nums.size();i++){
            //minimum element to be searched for the purpose of comparing the next +1 value
            if(s.find(nums[i]-1) == s.end()){
                int j = nums[i]; // current value
                // next values while true do j++
                while(s.find(j)!=s.end())
                    j++;
                // max of previous ans and j - nums[i](-> smallest value)
                ans = max(ans,j-nums[i]);
            }
        }
        return ans;
    }

5. Maximal Square
Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

Example:

Input: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

Output: 4
#
--------------------O(M*N), O(M*N) ------------------------------------------------------------------------------

 int maximalSquare(vector<vector<char>>& matrix) {
        int r=matrix.size();
        if(r==0)
            return 0;
        int c=matrix[0].size();
        if(c==0)
            return 0;
        
        int square=0;
        vector<vector<int>> dp(r,vector<int>(c,0));
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(i==0 || j==0){
                    if(matrix[i][j]=='1'){
                        dp[i][j]=1;
                        square=max(square,dp[i][j]);
                    }
                }
            
                else{
                    if(matrix[i][j]=='1'){
                        dp[i][j]=1+min({dp[i-1][j-1],dp[i-1][j],dp[i][j-1]});
                        square=max(square,dp[i][j]);
                    }
                }
        }
        }
        return square*square;
        
    }

6. Count Square Submatrices with All Ones
Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.
Example 1:

Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.
Example 2:

Input: matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation: 
There are 6 squares of side 1.  
There is 1 square of side 2. 
Total number of squares = 6 + 1 = 7.
 

Constraints:

1 <= arr.length <= 300
1 <= arr[0].length <= 300
0 <= arr[i][j] <= 1
#
----------------------------------------O(M*N), O(1)-------------------------------------------------------

int countSquares(vector<vector<int>>& matrix) {
        int m = matrix.size();
        if(m == 0)
            return 0;
        int n = matrix[0].size();
        if(n == 0)
            return 0;
        int total = 0;
        //1st row
        for(int j=0;j<n;j++){
                total+=matrix[0][j];
        }
        //1st column except the (0,0)th element
        for(int i=1;i<m;i++){
                total+=matrix[i][0];
        }
            
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                if(matrix[i][j]){
                    matrix[i][j] = min(matrix[i-1][j], min(matrix[i-1][j-1], matrix[i][j-1])) + 1;
                    total+=matrix[i][j];
                }
        }
        }
        return total;
        }

7. UNCROSSED LINES
We write the integers of A and B (in the order they are given) on two separate horizontal lines.

Now, we may draw connecting lines: a straight line connecting two numbers A[i] and B[j] such that:

A[i] == B[j];
The line we draw does not intersect any other connecting (non-horizontal) line.
Note that a connecting lines cannot intersect even at the endpoints: each number can only belong to one connecting line.

Return the maximum number of connecting lines we can draw in this way.

 

Example 1:


Input: A = [1,4,2], B = [1,2,4]
Output: 2
Explanation: We can draw 2 uncrossed lines as in the diagram.
We cannot draw 3 uncrossed lines, because the line from A[1]=4 to B[2]=4 will intersect the line from A[2]=2 to B[1]=2.
Example 2:

Input: A = [2,5,1,2,5], B = [10,5,2,1,5,2]
Output: 3
Example 3:

Input: A = [1,3,7,1,7,5], B = [1,9,2,5,1]
Output: 2
 

Note:

1 <= A.length <= 500
1 <= B.length <= 500
1 <= A[i], B[i] <= 2000
#
---------------------O(M*N), O(M*N)----------------------------------------------------

// ----------------SIMILIAR TO THE LCS --------------------
    int maxUncrossedLines(vector<int>& A, vector<int>& B) {
        int m = A.size();
        int n = B.size();
        if(m == 0 || n == 0)
            return 0;
        vector<vector<int>> dp(m+1,vector<int>(n+1,0));
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(A[i-1] == B[j-1])
                    dp[i][j] = dp[i-1][j-1]+1;
                else
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[m][n];
    }