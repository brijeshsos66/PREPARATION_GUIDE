Day15: (String) 

1.	Reverse Words in a String 
Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

Example 1:
Input: "Let's take LeetCode contest"
Output: "s'teL ekat edoCteeL tsetnoc"
Note: In the string, each word is separated by single space and there will not be any extra space in the string.
#
SOLUTION:
----O(N), O(1) ------
string reverseWords(string s) {
        int l=0, r=0;
        while(l < s.length()){
            while(r < s.length() && s[r]!=' ')
                r++;
            reverse(s.begin()+l,s.begin()+r);
            l = r+1;
            r = l;
        }
        return s;
    }

2. LONGEST PALINDROME IN A STRING (DP)
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: "cbbd"
Output: "bb"

SOLUTION:
--NAIVE APPROACH ---O(N^3), O(1) ----- MAKE ALL THE N^2 STRINGS AND CHECK FOR PALINDROME
--OPTIMIZED  ----O(N^2), O(N^2) ----- DP
(I) 
string longestPalindrome(string s) {
        int n = s.length();
        if(n < 2)
            return s;
        
        int left = 0, right = 0;
        vector<vector<bool>> table(n,vector<bool>(n,false));
        
        for(int j=1;j<n;j++){
            for(int i=0;i<j;i++){
                bool isp = table[i+1][j-1] || (j-i <= 2);
                
                if(s[i] == s[j] && isp){
                    table[i][j] = true;
                    
                    if(j - i > right - left){
                        left = i;
                        right = j;
                    }
                }
            }
        }
        return s.substr(left,right+1);
    }

(II) 
#include <bits/stdc++.h> 
using namespace std; 
  
// Function to print a substring 
// str[low..high] 
void printSubStr( 
    string str, int low, int high) 
{ 
    for (int i = low; i <= high; ++i) 
        cout << str[i]; 
} 
  
// This function prints the 
// longest palindrome substring 
// It also returns the length of 
// the longest palindrome 
int longestPalSubstr(string str) 
{ 
    // get length of input string 
    int n = str.size(); 
  
    // table[i][j] will be false if substring 
    // str[i..j] is not palindrome. 
    // Else table[i][j] will be true 
    bool table[n][n]; 
  
    memset(table, 0, sizeof(table)); 
  
    // All substrings of length 1 
    // are palindromes 
    int maxLength = 1; 
  
    for (int i = 0; i < n; ++i) 
        table[i][i] = true; 
  
    // check for sub-string of length 2. 
    int start = 0; 
    for (int i = 0; i < n - 1; ++i) { 
        if (str[i] == str[i + 1]) { 
            table[i][i + 1] = true; 
            start = i; 
            maxLength = 2; 
        } 
    } 
  
    // Check for lengths greater than 2. 
    // k is length of substring 
    for (int k = 3; k <= n; ++k) { 
        // Fix the starting index 
        for (int i = 0; i < n - k + 1; ++i) { 
            // Get the ending index of substring from 
            // starting index i and length k 
            int j = i + k - 1; 
  
            // checking for sub-string from ith index to 
            // jth index iff str[i+1] to str[j-1] is a 
            // palindrome 
            if (table[i + 1][j - 1] && str[i] == str[j]) { 
                table[i][j] = true; 
  
                if (k > maxLength) { 
                    start = i; 
                    maxLength = k; 
                } 
            } 
        } 
    } 
  
    cout << "Longest palindrome substring is: "; 
    printSubStr(str, start, start + maxLength - 1); 
  
    // return length of LPS 
    return maxLength; 
} 
  
// Driver Code 
int main() 
{ 
    string str = "forgeeksskeegfor"; 
    cout << "\nLength is: "
         << longestPalSubstr(str); 
    return 0; 
} 

3.	Roman Number to Integer and vice versa
(I) ROMAN TO INTEGER
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.

Example 1:

Input: "III"
Output: 3
Example 2:

Input: "IV"
Output: 4
Example 3:

Input: "IX"
Output: 9
Example 4:

Input: "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
Example 5:

Input: "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
#
-----O(N), O(N) ----- USING HASH MAP (ANOTHER SOLUTION USE SWITCH STATEMENT SAVE MEMORY)

int romanToInt(string s) {
        if(s.length() == 0)
            return 0;
        unordered_map<char,int> dictionary{
            {'I',1},
            {'V',5},
            {'X',10},
            {'L',50},
            {'C',100},
            {'D',500},
            {'M',1000}
        };
        
        int result = 0;
        for(int i=0;i<s.length();i++){
            // this case is special for 4 , 9 etc ---> IV 1<5 SO -1 THEN ADD 5 = 4 
            // FOR 9 --> IX  --> 1 < 10 --> -1 + 10 = 9
            if(dictionary[s[i]]<dictionary[s[i+1]])
                result-=dictionary[s[i]];
            else
                result+=dictionary[s[i]];
        }
        return result;
    }

(II) INTEGER TO ROMAN
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.

Example 1:

Input: 3
Output: "III"
Example 2:

Input: 4
Output: "IV"
Example 3:

Input: 9
Output: "IX"
Example 4:

Input: 58
Output: "LVIII"
Explanation: L = 50, V = 5, III = 3.
Example 5:

Input: 1994
Output: "MCMXCIV"
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
#
 string intToRoman(int num) {
        string output = "";
        while(num!=0){
    // there case sepcial cases like 4(IV), 9(IX), 40(XL), 90(XC), 400(CD), 900(CM) and all but num <= 3999
            if(num >= 1000){
                num = num - 1000;
                output+="M";
            }
            else if(num >= 900){
                num = num - 900;
                output+="CM";
            }
            else if(num>=500){
                num = num - 500;
                output+="D";
            }
            else if(num>=400){
                num = num - 400;
                output+="CD";
            }
            else if(num>=100){
                num = num - 100;
                output+="C";
            }
            else if(num>=90){
                num = num - 90;
                output+="XC";
            }
            else if(num>=50){
                num = num - 50;
                output+="L";
            }
            else if(num>=40){
                num = num - 40;
                output+="XL";
            }
            else if(num>=10){
                num = num - 10;
                output+="X";
            }
            else if(num>=9){
                num = num - 9;
                output+="IX";
            }
            else if(num>=5){
                num = num - 5;
                output+="V";
            }
            else if(num>=4){
                num = num - 4;
                output+="IV";
            }
            else{
                num = num - 1;
                output+="I";
            }
        }
        return output;
    }

4.	Implement ATOI/STRSTR 
(I) IMPLEMENT strStr()
Implement strStr().

Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Example 1:

Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:

Input: haystack = "aaaaa", needle = "bba"
Output: -1
Clarification:

What should we return when needle is an empty string? This is a great question to ask during an interview.

For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().

SOLUTION:

int strStr(string haystack, string needle) {
        int m = haystack.size();
        int n = needle.size();
        if(m==0 && n==0)
            return 0;
        if(m == 0)
            return -1;
        if(n == 0)
            return 0;
        if(n > m)
            return -1;
        for(int i=0;i<m-n+1;i++){
            if(needle == haystack.substr(i,n))
                return i;
        }
        return -1;
    }

(II) IMPLEMENT STOI(String to Integer (atoi))
Implement atoi which converts a string to an integer.

The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.

The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.

If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.

If no valid conversion could be performed, a zero value is returned.

Note:

Only the space character ' ' is considered as whitespace character.
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned.
Example 1:

Input: "42"
Output: 42
Example 2:

Input: "   -42"
Output: -42
Explanation: The first non-whitespace character is '-', which is the minus sign.
             Then take as many numerical digits as possible, which gets 42.
Example 3:

Input: "4193 with words"
Output: 4193
Explanation: Conversion stops at digit '3' as the next character is not a numerical digit.
Example 4:

Input: "words and 987"
Output: 0
Explanation: The first non-whitespace character is 'w', which is not a numerical 
             digit or a +/- sign. Therefore no valid conversion could be performed.
Example 5:

Input: "-91283472332"
Output: -2147483648
Explanation: The number "-91283472332" is out of the range of a 32-bit signed integer.
             Thefore INT_MIN (−231) is returned.

SOLUTION:

STEPS:
(I) REMOVE THE WHITESPACES
(II) CHECK WHETHER IT IS A POSITIVE OR NEGATIVE (SIGN, NUMBER)
(III) CONVERSION TO THE NUMBER
(IV) CHECK FOR RETURN VALUE IF > INT_MAX SO RETURN VALUE BASED ON THE NEG FLAG , IF TRUE RETURN INT_MIN ELSE INT_MAX
(V) IF NOT IV STEP THEN RETURN VALUE BASED ON THE NEG FLAG, IF TRUE THEN (NUM*(-1)) ELSE NUM
#
int myAtoi(string s) {
        int i = 0;
        int len = s.size();
        bool neg = false;
        long num = 0;
        
        // skip the whitespaces
        while(i<len && s[i] == ' ')
            i++;
        
        // check for + or - number
        if(i < len && s[i] == '-'){
            i++;
            neg = true;
        }
        else if(i<len && s[i] == '+'){
            i++;
        }
        
        //coversion to the number
        while(s[i] >= '0' && s[i] <= '9'){
            num = num*10 + s[i] - '0';
            i++;
            
            if(num > INT_MAX)
                break;
        }
        
        //check if the num > INT_MAX
        if(num > INT_MAX){
            if(neg)
                return INT_MIN;
            return INT_MAX;
        }
        
        // if number not greater than INT_MAX then return the original value based on the neg flag
        if(neg)
            return (num * -1);
        return num;
    }

5.	Longest Common Prefix 
Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

Example 1:

Input: ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
Note:

All given inputs are in lowercase letters a-z.

SOLUTION:
---------O(S) ,  S IS THE SUM OF ALL THE STRINGS , O(1) ------

 string longestCommonPrefix(vector<string>& s) {
        if(s.size() == 0)
            return "";
        string longestcommon = s[0];

        for(int i=1;i<s.size();i++){
             int j = 0;
             string s2 = s[i];
            while(j<longestcommon.size() && j < s2.size() && longestcommon[j] == s2[j]){
                j++;
            }
            if(j==0)
                return "";
            longestcommon = longestcommon.substr(0,j);
        }
        return longestcommon;
    }

-------TRIE APPROACH ---------(BAAD MAI KARENGE)

6.	Rabin Karp 
VERY STRONG STRING PATTERN MATCHING ALGORITHM USING THE HASH FUNCTION.
UNDERSTAND IT FROM THIS LINK : https://www.youtube.com/watch?v=qQ8vS2btsxI

CODE :
------0(M-N+1), O(1) ----- -> 0(N), O(1) ----
WORST CASE : DUE TO THE SPURIOUS HITS 
------O(M*N) , O(1) ------- 

#include<bits/stdc++.h>
#define ll long long int
#define prime 119
using namespace std;

ll createHashValue(string str, int n){
 ll result = 0;
 for(int i=0;i<n;i++){
  result+=(ll)(str[i]*(ll)pow(prime,i));   //this calculate in the form like currentvalue*10^0 + nextvalue*10^1+ nextnextvalue*10^2 + .... etc
 }
 return result;
}

ll recalculateHash(string str, int oldindex, int newindex, ll oldhash, int patlength){
 ll newhash = oldhash - str[oldindex];
 newhash/=prime;
 newhash+=(ll)(str[newindex]*(ll)(pow(prime,patlength-1)));
 return newhash;
}

bool checkequal(string s1, string s2, int start1, int end1, int start2, int end2){
 if(end1-start1 != end2-start2){
 	return false;
 }
 while(start1<=end1 && start2<=end2){
  if(s1[start1]!=s2[start2]){
  	return false;
 }
 start1++;
 start2++;
 } return true;
}

int main(){
string str = "ababcabdab";
string pat = "abd";
ll pathash = createHashValue(pat, pat.length());
ll strhash = createHashValue(str, pat.length());
 for(int i=0;i<str.length()-pat.length();i++){
 if(pathash == strhash && checkequal(str,pat,i,i+pat.length()-1,0,pat.length()-1)){
  cout<<i<<endl;
 }
 if(i<str.length()-pat.length()){
  strhash = recalculateHash(str,i,i+pat.length(),strhash, pat.length());
}
}
 return 0;
}

7. VALID PALINDROME
Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

Note: For the purpose of this problem, we define empty string as valid palindrome.

Example 1:

Input: "A man, a plan, a canal: Panama"
Output: true
Example 2:

Input: "race a car"
Output: false
 

Constraints:

s consists only of printable ASCII characters.
#
------------------------O(N), O(1)------------------------------------------------

    bool isPalindrome(string s) {
        if(s.length() <= 1)
            return true;
        int start = 0, end = s.length()-1;
        while(start < end){
            while(start<end && !isalnum(s[start]))
                start++;
            while(start<end && !isalnum(s[end]))
                end--;
            if(start<end && tolower(s[start])!=tolower(s[end]))
                return false;
            start++;
            end--;
        }
        return true;
    }