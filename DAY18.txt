Day18: (Binary Tree) 
1.	Level order Traversal / Level order traversal in spiral form 
(I) LEVEL ORDER TRAVERSAL
          15
        /   \
       10    20
      /  \   /  \
     8   12 18  25

---> 15,10,20,8,12,18,25
-- WE WILL BE MAKING USE OF THE BFS APPROACH
-- MAKING USE OF THE QUEUE 
#
struct Node{
  int data;
  Node* left;
  Node* right;
};

void LevelOrder(Node* root){
 if(root == NULL)
     return;

 queue<Node*> q;
 q.push(root);

 while(!q.empty()){

 Node* temp = q.front();
 cout<<temp->data<<" ";

 q.pop();

 if(temp->left)
     q.push(temp->left);

 if(temp->right)
     q.push(temp->right);
  }
}

(II) LEVEL ORDER TRAVERSAL USING SPIRAL FORM
       1                    RIGHT      <----
    /     \                
   2       3                LEFT       ----->
 /   \   /   \
7     6 5     4             RIGHT      <----

OUTPUT : 1 2 3 4 5 6 7
#
void spiral(bst* root){
    if(root == NULL)
        return;
    stack<bst*> s1,s2;
    s1.push(root);
    
    while(!s1.empty() || !s2.empty()){
        while(!s1.empty()){
            bst* temp = s1.top();
            cout<<temp->data<<" ";
            s1.pop();
            if(temp->right)
                s2.push(temp->right);
            if(temp->left)
                s2.push(temp->left);
        }
        while(!s2.empty()){
            bst* temp = s2.top();
            cout<<temp->data<<" ";
            s2.pop();
            if(temp->left)
                s1.push(temp->left);
            if(temp->right)
                s1.push(temp->right);
        }
    }
}

2.	Height of a Binary Tree 

          15                HEIGHT 3
        /   \
       10    20             HEIGHT 2
      /  \   /  \
     8   12 18  25          HEIGHT 1
  
# 
USING RECURSION:

int findHeight(bst* root){
  if(root == NULL)
	return 0;             // -1 IF LEVEL STARTS FROM 0
  int l = findHeight(root->left);
  int r = findHeight(root->right);
  return max(l,r) + 1;
}

WIHTOUT RECURSION:

int treeHeight(node *root) 
{ 
    // Base Case 
    if (root == NULL) 
        return 0; 
  
    // Create an empty queue for level order tarversal 
    queue<node *> q; 
  
    // Enqueue Root and initialize height 
    q.push(root); 
    int height = 0; 
  
    while (1) 
    { 
        // nodeCount (queue size) indicates number of nodes 
        // at current lelvel. 
        int nodeCount = q.size(); 
        if (nodeCount == 0) 
            return height; 
  
        height++; 
  
        // Dequeue all nodes of current level and Enqueue all 
        // nodes of next level 
        while (nodeCount > 0) 
        { 
            node *node = q.front(); 
            q.pop(); 
            if (node->left != NULL) 
                q.push(node->left); 
            if (node->right != NULL) 
                q.push(node->right); 
            nodeCount--; 
        } 
    } 
} 

3.	Diameter of Binary Tree 
Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].
#
---O(N), O(N) ----
IDEA:
 THE DIAMETER CAN BE MAX OF BOTH THE HEIGHTS(LEFT & RIGHT) OR MAX OF LEFT DIAMETER & RIGHT DIAMETER
 
//CALCULATES THE HEIGHT
 int height(TreeNode* root){
        if(root == NULL)
            return 0;
        return max(height(root->left),height(root->right)) + 1;
    }
// CALCULATES THE DIAMETER
    int diameterOfBinaryTree(TreeNode* root) {
        if(root == NULL)
            return 0;
        int lheight = height(root->left);
        int rheight = height(root->right);
        int ldiameter = diameterOfBinaryTree(root->left);
        int rdiameter = diameterOfBinaryTree(root->right);
        return max(lheight+rheight, max(ldiameter,rdiameter));
    }

4.	Check if Binary tree is height balanced or not 
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 

Example 1:

Given the following tree [3,9,20,null,null,15,7]:

    3
   / \
  9  20
    /  \
   15   7
Return true.

Example 2:

Given the following tree [1,2,2,3,3,null,null,4,4]:

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
Return false.

SOLUTION:
#
----O(N), O(N)-----
int isHeightBalanced(TreeNode* root, bool& balanced){
        //base case: tree is empty or tree is not balanced
        if(root == NULL || !balanced)
            return 0;
        //get height of the left subtree
        int left_height = isHeightBalanced(root->left,balanced);
        //get height of the right subtree
        int right_height = isHeightBalanced(root->right,balanced);
        //checking if |l - r| > 1 --> unbalanced
        if(abs(left_height - right_height) > 1)
            balanced = false;
        //return height of subtree rooted at the current node 
        return max(left_height,right_height)+1;
    }
    bool isBalanced(TreeNode* root) {
        if(root == NULL)
            return true;
        bool balanced = true;
        isHeightBalanced(root,balanced);
        
        return balanced;
    }

5.	LCA in Binary Tree 
          a
       /     \
      b       c
    /   \   /   \
   d     e f     g
       /  \
      h     i

LCA(b,c) = a
LCA(d,h) = b
LCA(h,e) = e
LCA(c,g) = c
#
TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        //base case
	if(root == NULL)
            return NULL;
        // if anyone of the value found then return its address(value)
        if(root->val == p->val || root->val == q->val)
            return root;
        //checking for the left and right
        TreeNode* left = lowestCommonAncestor(root->left,p,q);
        TreeNode* right = lowestCommonAncestor(root->right,p,q);
        //if both not empty, that means we have found the LCA return root
        if(left!=NULL && right!=NULL)
            return root;
        else  // if anyone is null then return the other
            return(left?left:right);
    }

6.	Check if two trees are identical or not 
EXAMPLE 1: 
           50
         /      \
        10       60           (I)
       /  \     /   \
      5   20   70    70
---------------------------------
             50
         /      \
        10       60          (II)
       /  \     /   \
      5   20   70    70
  I & II ARE EQUAL 

EXAMPLE 2: 
            50
         /      \
        10       60           (I)
       /        /   \
      5       70    70
----------------------------------
            50
         /      \
        10       60          (II)
       /  \     /   \
      5   20   70    70
  I & II ARE NOT EQUAL 

SOLUTION:
----O(N), O(N) -----

int check(Node* p1, Node* p2){
  // base case: if both the trees came to the end i.e., NULL return TRUE
  if(p1 == NULL && p2 == NULL)
        return true;
   // check

  if(p1!=NULL && p2!=NULL){
     if(p1->data == p2->data && check(p1->left,p2->left) && check(p1->right,p2->right))
     {
       return 1;  // true
     }
   }
  return 0;  // if not true, i.e., either not value not equal or one came to end and other is not NULL
 }
  
7. MERGE TWO BINARY TREES
Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.

You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.

Example 1:

Input: 
	Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
Output: 
Merged tree:
	     3
	    / \
	   4   5
	  / \   \ 
	 5   4   7
 

Note: The merging process must start from the root nodes of both trees.

#
-------------------O(N), O(N) ---------------------------------

TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if(t1&&t2){
            TreeNode* root = new TreeNode(t1->val+t2->val);
            root->left = mergeTrees(t1->left,t2->left);
            root->right = mergeTrees(t1->right,t2->right);
            return root;
        }
        else{
            return t1?t1:t2;
        }
    }
