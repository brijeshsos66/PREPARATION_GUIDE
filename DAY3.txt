Day3: (Math)

1.	Excel Column Number 
Given a column title as appear in an Excel sheet, return its corresponding column number.

For example:

    A -> 1
    B -> 2
    C -> 3
    ...
    Z -> 26
    AA -> 27
    AB -> 28 
    ...
Example 1:

Input: "A"
Output: 1
Example 2:

Input: "AB"
Output: 28
Example 3:

Input: "ZY"
Output: 701

SOLUTION:
----- O(N), O(1) ------
// initailizing the ans to 0
    int titleToNumber(string s) {
        int ans = 0;
        // for every character in string s
        for(auto c : s){
// doing ans = ans * 26 if s < 'Z' it will satisfy as well as for the next characters if they are available in the string
            ans = ans * 26;
 // storing the ascii value of each character('65 TO 122') in s - ascii value of 'A' = 65 so +1 for getting the exact difference       
            ans+= (c -'A'+ 1);
        }
        return ans;
    }

2.	Find n^x in log N 
Given two integers x and n, write a function to compute xn. We may assume that x and n are small and overflow doesn’t happen.
Examples :

Input : x = 2, n = 3
Output : 8

Input : x = 7, n = 2
Output : 49

SOLUTION:
(I)---BRUTE FORCE -----
	int power(int x, int n){
	      if(n == 0)
		return 1;
	      else
		return (x*power(x,n-1));
		}
-------O(N),O(N)-----
(II) CHECKING FOR ODD AND EVEN NUMBER SO CONDITIONS WILL BE THERE.
	int power(int x, int n){
	      if(n == 0)
		return 1;
	      else if(n%2==0)
		return power(x,n/2) * power(x,n/2);
	      else
		return x*power(x,n/2)*power(x,n/2);
		}
--------O(N), O(1) -------
(III) STORING THE POWER VALUES IN THE TEMPORARY VARIABLE
	int power(int x, int n){
	      if(n == 0)
		return 1;
 	      int temp = power(x,n/2);
	      if(n%2==0)
		return temp * temp;
	      else
		return x*temp*temp;
		}
-------O(LOGN),O(1)-----
(IV) DOING THE SAME BUT IT WILL BE APPLICABLE TO NEGATIVE POWER AS WELL 
	float power(float x, float n){
	      if(n == 0)
		return 1;
 	      float temp = power(x,n/2);
	      if(n%2==0)
		return temp * temp;
	      else{
		if(y>0)
		     return x*temp*temp;
		else
	             return (temp*temp)/x;
		}
	   }
------O(LOGN),O(1) ------

3.	Count trailing zeros in factorial of a number 
Given an integer n, write a function that returns count of trailing zeroes in n!.
Examples :

Input: n = 5
Output: 1 
Factorial of 5 is 120 which has one trailing 0.

Input: n = 20
Output: 4
Factorial of 20 is 2432902008176640000 which has
4 trailing zeroes.

Input: n = 100
Output: 24

SOLUTION:
THE APPROACH SHOULD BE TO CALCULATE THE NUMBER OF 5 AS, 5*2 = 10 BUT 1-100 THERE BE MANY NUMBERS HAVING 2 AS AN END INTEGER.

// Function to return trailing  
// 0s in factorial of n 
int findTrailingZeros(int n) 
{ 
    // Initialize result 
    int count = 0; 
  
    // Keep dividing n by powers of  
    // 5 and update count 
    for (int i = 5; n / i >= 1; i *= 5) 
        count += n / i; 
  
    return count; 
} 

IT IS LIKE IF NUMBER IS 5:   5/5 = 1, IF NUMBER IS 100 :  100/5(RESULTS 20) + 20/5(RESULTS 4) = 24. SO WE USE FLOOR VALUES OF  (NUMBER /5) + (NUMBER / 25) + (NUMBER / 125) ...SO ON 
 THEREFORE ------ FOR 5  ; IT IS 5/5= 1 ,, ------- FOR 100, IT WILL BE  ------ (100/5) + (100/25) = 24 (AND NOT 100/125 AS 100 < 125 ))

4.	Find GCD in Log N 
GCD of two numbers is the largest number that divides both of them. A simple way to find GCD is to factorize both numbers and multiply common factors.
If we subtract smaller number from larger (we reduce larger number), GCD doesn’t change. So if we keep subtracting repeatedly the larger of two, we end up with GCD.
Now instead of subtraction, if we divide smaller number, the algorithm stops when we find remainder 0.

SOLUTION:
(I)
	def gcd(a, b):
	2 if a == b:
	3	 return a
	4 if a > b:
	5 	gcd(a - b, b)
	6 else:
	7	 gcd(a, b - a)
Let’s estimate this algorithm’s time complexity (based on n = a+b). The number of steps can
be linear, for e.g. gcd(x, 1), so the time complexity is O(n). This is the worst-case complexity,
because the value x + y decreases with every step.
(II) 
USING EUCLIDEAN ALGORITHM
------OPTIMIZED IN LOG(MIN(A,B)) OR O(LOGN) --------

      int gcd(int a, int b)
	{
	if(b==0)
		return a;
	return gcd(b,a%b);
	}

5.	Grid Unique Paths 
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?
Example 1:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right
Example 2:

Input: m = 7, n = 3
Output: 28
 

Constraints:

1 <= m, n <= 100
It's guaranteed that the answer will be less than or equal to 2 * 10 ^ 9.

SOLUTION:
-------O(M*N), O(M*N) --------
 int uniquePaths(int m, int n) {
        
        vector<vector<int>> dp(m,vector<int>(n,0));
        //initializing 0th row and column as 0
        for(int i=0;i<m;i++)
            dp[i][0] = 1;
        for(int j=0;j<n;j++)
            dp[0][j] = 1;
        
        for(int i =1;i<m; i++)
            for(int j = 1;j<n;j++)
                dp[i][j] = dp[i-1][j] + dp[i][j-1]; // we are adding the values from our current's point //above which is [i-1][j] and left point which is [i][j-1]
        
        //returning the value after taking all the unique paths into consideration
        return dp[m-1][n-1];
        
    }

 