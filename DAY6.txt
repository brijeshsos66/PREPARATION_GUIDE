Day6: (Linked List 2)

1.	Find intersection point of Y LinkedList 
Write a program to find the node at which the intersection of two singly linked lists begins.
EXAMPLE 1:
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
Output: Reference of the node with value = 8
Input Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B
EXAMPLE 2:
Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: null
Input Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
Explanation: The two lists do not intersect, so return null.

SOLUTION:
Approach 1: Brute Force
For each node ai in list A, traverse the entire list B and check if any node in list B coincides with ai.

Complexity Analysis

Time complexity : O(mn)O(mn).

Space complexity : O(1)O(1).


Approach 2: Hash Table
Traverse list A and store the address / reference to each node in a hash set. Then check every node bi in list B: if bi appears in the hash set, then bi is the intersection node.

Complexity Analysis

Time complexity : O(m+n)O(m+n).

Space complexity : O(m)O(m) or O(n)O(n).

-------APPROACH 3 ---- O(M+N), O(1) ------
Maintain two pointers pA and pB initialized at the head of A and B, respectively. Then let them both traverse through the lists, one node at a time.
When pA reaches the end of a list, then redirect it to the head of B (yes, B, that's right.); similarly when pB reaches the end of a list, redirect it the head of A.
If at any point pA meets pB, then pA/pB is the intersection node.
To see why the above trick would work, consider the following two lists: A = {1,3,5,7,9,11} and B = {2,4,9,11}, which are intersected at node '9'. Since B.length (=4) < A.length (=6), pB would reach the end of the merged list first, because pBpB traverses exactly 2 nodes less than pA does. By redirecting pBpB to head A, and pA to head B, 
we now ask pBpB to travel exactly 2 more nodes than pApA would. So in the second iteration, they are guaranteed to reach the intersection node at the same time.
If two lists have intersection, then their last nodes must be the same one. So when pA/pB reaches the end of a list, record the last element of A/B respectively. If the two last elements are not the same one, then the two lists have no intersections.

ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA == NULL || headB == NULL)
            return NULL;
        ListNode* a = headA;
        ListNode* b = headB;
        
        while(a!=b){
            if(a == NULL){
                a=headB;
            }else{
                a = a->next;
            }
            
            if(b == NULL){
                b = headA;
            }else{
                b = b->next;
            }
        }
        return a;
    }

2.	Check if a LinkedList is palindrome or not. 
Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
Example 2:

Input: 1->2->2->1
Output: true
Follow up:
Could you do it in O(n) time and O(1) space?

SOLUTION:
----O(N), O(1) --------
 // THIS WILL REVERSE THE LINKED LIST AND RETURN THE POINTER THE LAST VALUE
    ListNode* reversed(ListNode* head){
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* next = NULL;
        while(curr!=NULL){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {
        if(head == NULL || head->next == NULL)
            return true;
        ListNode* slow = head;
        ListNode* fast = head;
        
        // FINDING THE MIDDLE OF THE LINKED LIST
        while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        // SLOW WILL CALL REVERSE WHICH WILL REVERSE THE LIST FROM THE MIDDLE 
        // EXAMPLE :  1->2->2->1   ---->  1->2->1->2  FAST WILL POINT TO INITIAL HEAD AND SLOW WILL POINT TO 
        // MIDDLE THEN COMPARE EACH VALUE. 
        slow = reversed(slow);
        fast = head;
        
        while(slow!=NULL){
            if(slow->val!=fast->val){
                return false;
            }
            slow = slow->next;
            fast = fast->next;
        }
        return true;
    }
3.	Reverse a LinkedList in groups. (HARD)
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Note:

Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.

SOLUTION:

 ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* current = head;
        int count = 0;
        while(current!=NULL && count!=k){
            ++count;
            current = current->next;
        }
        if(count == k){
            ListNode* next =NULL, *prev = NULL; current = head;
            while(count){
                next = current->next;
                current->next = prev;
                prev = current;
                current = next;
                count--;
            }
            if(next!=NULL)
                head->next = reverseKGroup(next,k);
            return prev;
            
        }
        return head;
        
    }

4.	Detect a cycle and removing loop(two different questions and same concept)
(I) Linked List Cycle
Given a linked list, determine if it has a cycle in it.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1 (3->2->0->-4->(cycle)2->0->-4 ....)
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the second node.

Example 2:
Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.

SOLUTION:
----O(N), O(1) ------
bool hasCycle(ListNode *head) {
        if(head == NULL)
            return false;
        ListNode* slow = head;
        ListNode* fast = head->next;
        
        while(slow!=fast){
            if(fast == NULL || fast->next == NULL){
                return false;
            }
            slow = slow->next;
            fast = fast->next->next;
        }
        return true;
    }

(II) STARTING POINT OF THE LINKED LIST CYCLE( LINKED LIST CYCLE II)
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. 
If pos is -1, then there is no cycle in the linked list.

Note: Do not modify the linked list.

#
ListNode *detectCycle(ListNode *head) {
        if(head == NULL || head->next == NULL)
            return NULL;
        ListNode* slow = head;
        ListNode* fast = head;
        ListNode* entry = head;
        
        while(fast->next && fast->next->next){
            slow = slow->next;
            fast = fast->next->next;
            if(slow == fast){
                while(slow!=entry){
                    slow = slow->next;
                    entry = entry->next;
                }
                return entry; // found the starting point of the loop
            }
        }
        return NULL; // not found, then return NULL
    }

(III) Removing a loop (detecting a loop and removing loop)

   ListNode* removeCycle(ListNode* head){
        if(head == NULL || head->next == NULL)
		return NULL;
        ListNode* slow = head;
        ListNode* fast = head;
        while(slow!=fast){	// detecting cycle		
		if(fast == NULL || fast->next == NULL)
			return NULL;
		slow = slow->next;
		fast = fast->next->next;
         }
        fast = head;
        while(slow!=fast){     // finding the starting point of the cycle
            slow = slow->next;
	    fast = fast->next;
         }
        //removing the loop
       while(fast->next!=slow){
          fast = fast->next;
       }
       fast->next = NULL;
 
     return head;
}

5.	Flattening of a LinkedList 

6. Rotate a Linked list
Given a linked list, rotate the list to the right by k places, where k is non-negative.

Example 1:

Input: 1->2->3->4->5->NULL, k = 2
Output: 4->5->1->2->3->NULL
Explanation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL
Example 2:

Input: 0->1->2->NULL, k = 4
Output: 2->0->1->NULL
Explanation:
rotate 1 steps to the right: 2->0->1->NULL
rotate 2 steps to the right: 1->2->0->NULL
rotate 3 steps to the right: 0->1->2->NULL
rotate 4 steps to the right: 2->0->1->NULL

SOLUTION:

ListNode* rotateRight(ListNode* head, int k) {
        if(!head)
            return head;
        ListNode* node = head;
        int size = 1;
        while(node->next!=NULL){
            size++;
            node = node->next;
        }
        node->next = head;
        
        k%=size;
        while(--size >= k){
            node = node->next;
        }
        ListNode* first = node->next;
        node->next = NULL;
        return first;
    }

7.	Clone a Linked List with random and next pointer. 
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
Return a deep copy of the list.
The Linked List is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:
val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) where random pointer points to, or null if it does not point to any node.
LINK : https://leetcode.com/problems/copy-list-with-random-pointer/
#
THREE STEPS:
**(I)CONSTRUCTING THE NEW LIST WITH THE CURRENT VALUE AND THE NEXT VALUE WITH RANDOM SET AS NULL
(II)SETTING THE PREVIOUS NODE VALUE AT THIS STEP
(III) INORDER TO RETURN THE VALUES FROM THE NEW LIST WE NEED TO ARRANGE IT SUCH THAT PROPER ORDER WE CAN RETURN **

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head)
            return NULL;
        Node* head_cp = NULL;
        Node* curr = head;
        Node* curr_cp = NULL;
//(I)CONSTRUCTING THE NEW LIST WITH THE CURRENT VALUE AND THE NEXT VALUE WITH RANDOM SET AS NULL
        while(curr!=NULL){
            curr_cp = new Node(curr->val,curr->next,NULL);
            curr->next = curr_cp;
            curr = curr_cp->next;
        }
//(II)SETTING THE PREVIOUS NODE VALUE AT THIS STEP
        curr = head;
        while(curr!=NULL){
            curr_cp = curr->next;
            if(curr->random)
                curr_cp->random = curr->random->next;
            curr = curr_cp->next;
        }
//(III) INORDER TO RETURN THE VALUES FROM THE NEW LIST WE NEED TO ARRANGE IT SUCH THAT PROPER ORDER WE CAN RETURN 
        curr = head;
        head_cp = head->next;
        while(curr!=NULL){
            curr_cp = curr->next;
            curr->next = curr_cp->next; // making the question's list back to normal
            curr = curr->next;
            if(curr)
                curr_cp->next = curr->next;
        }
        return head_cp;
    }
};
8. SORT LIST 
Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5

SOLUTION:
----O(NLOGN),O(1) -------
(i) step 1 : find the middle of the linked list similiar to the merge sort partition.
    (ii) step 2 : merge all the complete lists by recursion.
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head->next == NULL)
            return head;
        
        ListNode* temp = head;
        ListNode* slow = head;
        ListNode* fast = head;
        
        while(fast!=NULL && fast->next!=NULL){
            temp = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        
        temp->next = NULL;
        
        ListNode* left = sortList(head);
        ListNode* right = sortList(slow);
        
        return merge(left,right);
    }
    ListNode* merge(ListNode* l1, ListNode* l2){
        ListNode* dummy = new ListNode(0);
        ListNode* last = dummy;
        
        while(l1!=NULL && l2!=NULL){
            if(l1->val < l2->val){
                last->next = l1;
                l1 = l1->next;
            }
            else{
                last->next = l2;
                l2 = l2->next;
            }
            last = last->next;
        }
        if(l1!=NULL){
            last->next = l1;
        }
        if(l2!=NULL){
            last->next = l2;
        }
        return dummy->next;
    }

9. ODD EVEN LINKED LIST
Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.

You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

Example 1:

Input: 1->2->3->4->5->NULL
Output: 1->3->5->2->4->NULL
Example 2:

Input: 2->1->3->5->6->4->7->NULL
Output: 2->3->6->7->1->5->4->NULL
 

Constraints:

The relative order inside both the even and odd groups should remain as it was in the input.
The first node is considered odd, the second node even and so on ...
The length of the linked list is between [0, 10^4].

SOLUTION:

ListNode* oddEvenList(ListNode* head) {
        if(head == NULL)
            return NULL;
        ListNode* odd = head;
        ListNode* even = head->next;
        ListNode* evenhead = even;
        
        while(even!=NULL && even->next!=NULL){
            odd->next = even->next;
            odd = odd->next;
            even->next = odd->next;
            even = even->next;
        }
        odd->next = evenhead;
        return head;
    }

10. REMOVE ELEMENTS FROM THE LINKEDLIST
Remove all elements from a linked list of integers that have value val.

Example:

Input:  1->2->6->3->4->5->6, val = 6
Output: 1->2->3->4->5
#
(I) RECURSIVE ---------------O(N), O(N)---------------------------------------
ListNode* removeElements(ListNode* head, int val) {
        if(!head)
            return head;
        ListNode* h = removeElements(head->next, val);
        if(head->val == val)
            return h;
        head->next = h;
        return head;
    }
(II) ITERATIVE ----------------O(N), O(1)------------------------------------- 
ListNode* removeElements(ListNode* head, int val) {
        if(!head)
            return head;
        ListNode* prev = NULL, *curr = head;
        while(curr){
            if(curr->val == val){
                if(!prev)
                    head = curr->next;
                else
                    prev->next = curr->next;
            }
            else
                prev = curr;
            curr = curr->next;
        }
        return head;
    }

11. Add two Elements II
You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7

# --------------------------O(MAX(l1,l2)),O(l1+l2)----------------------------------

ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack<int> s1,s2;
        while(l1){
            s1.push(l1->val);
            l1 = l1->next;
        }
        while(l2){
            s2.push(l2->val);
            l2 = l2->next;
        }
        
        ListNode* result = NULL;
        int List1,List2,carry = 0;
        while(!s1.empty()||!s2.empty()||carry){
            if(!s1.empty()){
                List1 = s1.top(); s1.pop();
            }else{
                List1 = 0;
            }
            if(!s2.empty()){
                List2 = s2.top(); s2.pop();
            } else{
                List2 = 0;
            }
            int temp = List1+List2+carry;
            ListNode* node = new ListNode(temp % 10);
            node->next = result;
            result = node;
            carry = temp/10;
        }
        return result;
    }